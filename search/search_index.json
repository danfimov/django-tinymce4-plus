{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"General","text":"<p><code>django-tinymce4-plus</code> is a reworked fork of django-tinymce4. It provides a TinyMCE 4 editor widget that can be used in Django forms and models.</p> <p></p> <p>TinyMCE 4 editor in Django Admin interface</p> <p>In this fork, all legacy and broken code has been cleaned in order to provide a simple but full-featured TinyMCE 4 experience in Django projects.</p> <p><code>django-tinymce4-plus</code> can use django-filebrowser-no-grappelli as a file manager for TinyMCE 4 to insert images and file links into edited text.</p> <p>//// note Currently <code>django-filebrowser</code> (grapelli-based) is not compatible with <code>django-tinymce4-plus</code> because it lacks support for TinyMCE 4. See this pull request for more details. ////</p> <p>The application also includes a spellchecker service for the TinyMCE 4 spellchecker plugin.</p>"},{"location":"#compatibility","title":"Compatibility","text":"<ul> <li>Python: 3.8 - 3.11</li> <li>Django: all LTS versions (1.11.29, 2.2.28, 3.2.25, 4.2.17)</li> </ul>"},{"location":"#naming-conventions","title":"Naming Conventions","text":"<p>In this documentation <code>django-tinymce4-plus</code> or <code>tinymce4-plus</code> (all lowercase) refers to this Python/Django application, and TinyMCE 4 or TinyMCE (CamelCase) refers to a JavaScript TinyMCE editor widget. If a version number is omitted, TinyMCE v.4.x.x is assumed.</p>"},{"location":"#license","title":"License","text":"<ul> <li><code>django-tinymce4-plus</code> software: MIT license.</li> <li>This documentation: CC BY-SA 4.0.</li> </ul>"},{"location":"advanced/","title":"Advanced Usage","text":""},{"location":"advanced/#applying-custom-css","title":"Applying custom CSS","text":"<p>The content_style and content_css TinyMCE configuration options allow you to define custom Cascading Style Sheets for the content in the TinyMCE editor window.</p> <p>The <code>contents_style</code> option defines inline styles and the <code>content_css</code> option defines a URL or a list of URLs for CSS files. For large Style Sheets, the latter option is preferable because a browser can cache CSS files.</p> <p>For example, if your website uses Bootstrap styles, you can apply those styles to edited content in the TinyMCE widget:</p> <pre><code>TINYMCE_DEFAULT_CONFIG = {\n    ...\n    'content_css': 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css',\n    ...\n}\n</code></pre>"},{"location":"advanced/#code-samples","title":"Code Samples","text":"<p>TinyMCE v.4.3 and later includes the codesample plugin that allows you to insert samples of programming code into edited content with pretty syntax highlighting. The <code>codesample</code> plugin uses the Prism library for syntax highlighting (default theme). The plugin supports the following languages: HTML/XML, JavaScript, CSS, PHP, Ruby, Python, Java, C#, and C/C++.</p> <p>The <code>codesample</code> plugin already includes the necessary Prism components to correctly display code samples in TinyMCE, but to make code samples correctly appear on webpages authored with TinyMCE, you need to include the links to Prism JavaScript/CSS files into the HTML code of your pages. The <code>tinymce4-plus</code> application already includes <code>prism.js</code> and <code>prism.css</code> files that can be referenced in your Django templates. For example:</p> <pre><code>{% load static from staticfiles %}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  ...\n  &lt;!-- Prism CSS --&gt;\n  &lt;link href=\"{% static 'tinymce/css/prism.css' %}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  ...\n  &lt;!-- Prism JS --&gt;\n  &lt;script src=\"{% static 'tinymce/js/prism.js' %}\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>You can use different Prism themes for your webpages, but in TinyMCE the content is always displayed with the default Prism theme.</p>"},{"location":"advanced/#the-preview-button","title":"The Preview Button","text":"<p>The preview plugin in TinyMCE 4, unlike in TinyMCE 3, does not support custom preview dialogs. Use custom Style Sheets as described in the first subsection on this page. They work for the preview window too.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#1100","title":"1.10.0","text":"<ul> <li>Added support for Python 3.12 and 3.13;</li> <li>Reorganized development dependencies into separate groups (lint, test, docs) and introduced new linting tools (ruff, codespell, zizmor);</li> <li>Migrated from setuptools to uv_build as the build backend.</li> </ul>"},{"location":"changelog/#191","title":"1.9.1","text":"<ul> <li>Fix static files distribution;</li> <li>Add more information about package to readme.</li> </ul>"},{"location":"changelog/#190","title":"1.9.0","text":"<ul> <li>Support for Python from 3.8 to 3.11;</li> <li>Support for LTS versions of Django (including 4.2);</li> <li>Add <code>TINYMCE_DISABLE_MARGIN_FIX</code> configuration for disabling margin-left fix for new Django versions (useful for custom admin themes).</li> </ul>"},{"location":"changelog/#180","title":"1.8.0","text":"<ul> <li>Removed Python 2.7 support;</li> <li>Added support for Python 3.8, Django 2.2 and 3.0.</li> </ul>"},{"location":"changelog/#175","title":"1.7.5","text":"<ul> <li>Support translated strings in settings (merwok);</li> <li>Set TinyMCE localization language when rendering the widget instead of the widget class initialization (allows to set TinyMCE language depending on the web page locale).</li> </ul>"},{"location":"changelog/#174","title":"1.7.4","text":"<ul> <li>Upgraded TinyMCE to v.4.9.2.</li> </ul>"},{"location":"changelog/#173","title":"1.7.3","text":"<ul> <li>Upgraded TinyMCE to v.4.8.3.</li> </ul>"},{"location":"changelog/#172","title":"1.7.2","text":"<ul> <li>Upgraded TinyMCE to v.4.8.0;</li> <li>Various fixes (maqmigh, ojiii, rvanlaar).</li> </ul>"},{"location":"changelog/#171","title":"1.7.1","text":"<ul> <li>Upgraded TinyMCE to v.4.7.11.</li> </ul>"},{"location":"changelog/#170","title":"1.7.0","text":"<ul> <li>Upgraded TinyMCE to v.4.7.4;</li> <li>Fixed using TinyMCE in non-admin forms;</li> <li>Fixed compatibility with <code>django-filebrowser-no-grapelli</code>. This broke compatibility with <code>django-filebrowser</code> (based on grapelli) until the latter adds support for TinyMCE 4.</li> </ul>"},{"location":"changelog/#160","title":"1.6.0","text":"<ul> <li>Upgraded TinyMCE to v.4.7.2;</li> <li>Added compatibility with Django 2.0 (thomwiggers);</li> <li>Fixed dropped widget attributes in Django =&gt; 1.11 (bentrm);</li> <li>Fixed missing Changelog in <code>sdist</code> .gz distribution.</li> </ul>"},{"location":"changelog/#152","title":"1.5.2","text":"<ul> <li>Fixed rendering TinyMCE widgets with multiple inline formsets in Django admin (se-bastiaan);</li> <li>Fixed running Django management commands with <code>ManifestStaticFilesStorage</code> and <code>DEBUG = False</code> (hopefully);</li> <li>Upgraded TinyMCE to v.4.6.7.</li> </ul>"},{"location":"changelog/#151","title":"1.5.1","text":"<ul> <li>Fixed running collectstatic command with <code>ManifestStaticFilesStorage</code> and <code>DEBUG = False</code>.</li> </ul>"},{"location":"changelog/#150","title":"1.5.0","text":"<ul> <li>Security: protected spellchecker REST endpoint from CRSF;</li> <li>Implemented correct handling of TinyMCE widgets inside inline formsets in Django admin interface</li> <li>Upgraded TinyMCE to v.4.6.6.</li> </ul>"},{"location":"changelog/#142","title":"1.4.2","text":"<ul> <li>Upgraded TinyMCE to v.4.6.4;</li> <li>Fixed the default editor config.</li> </ul>"},{"location":"changelog/#141","title":"1.4.1","text":"<ul> <li>Upgraded TinyMCE to v.4.6.2;</li> <li>Added text format selector to the default editor configuration.</li> </ul>"},{"location":"changelog/#140","title":"1.4.0","text":"<ul> <li>Upgraded TinyMCE to v.4.6.0.</li> </ul>"},{"location":"changelog/#132","title":"1.3.2","text":"<ul> <li>Fixed compatibility with Django v.1.11.</li> </ul>"},{"location":"changelog/#131","title":"1.3.1","text":"<ul> <li>Upgraded TinyMCE to v.4.5.5;</li> <li>Fixed language file configuration for languages with country codes (Gagaro);</li> <li>Rendering of the TinyMCE 4 is now tested with Selenium/PhantomJS.</li> </ul>"},{"location":"changelog/#130","title":"1.3.0","text":"<ul> <li>Upgraded TinyMCE to v.4.5.1.</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":"<ul> <li>Upgraded TinyMCE to v.4.4.3;</li> <li>Added <code>TINYMCE_ADDITIONAL_JS_URLS</code> configuration option.</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>Upgraded TinyMCE to v.4.4.1;</li> <li>Added Django 1.10 to compatibility matrix.</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Initial PyPI release.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#application-configuration","title":"Application Configuration","text":"<p>The following options can be defined for <code>tinymce4-plus</code> in your Django project's <code>settings.py</code> file.</p>"},{"location":"configuration/#tinymce_default_config","title":"<code>TINYMCE_DEFAULT_CONFIG</code>","text":"<p>TinyMCE 4 widget configuration. <code>tinymce4-plus</code> provides a reasonable default configuration with essential editing capabilities, so you need to use this option only if you want to create your own custom TinyMCE configuration.</p> <p>//// note In <code>tinymce4-plus</code> the TinyMCE configuration is defined as a Python <code>dict</code>. The <code>dict</code> configuration is then translated to JSON configuration according to <code>json.JSONEncoder</code> rules. ////</p> <p>See TinyMCE documentation for available configuration options.</p> <p>Default configuration:</p> <pre><code>DEFAULT = {\n    'selector': 'textarea',\n    'theme': 'modern',\n    'plugins': 'link image preview codesample contextmenu table code lists',\n    'toolbar1': 'formatselect | bold italic underline | alignleft aligncenter alignright alignjustify '\n               '| bullist numlist | outdent indent | table | link image | codesample | preview code',\n    'contextmenu': 'formats | link image',\n    'menubar': False,\n    'inline': False,\n    'statusbar': True,\n    'width': 'auto',\n    'height': 360,\n}\n</code></pre>"},{"location":"configuration/#tinymce_spellchecker","title":"<code>TINYMCE_SPELLCHECKER</code>","text":"<p>Enables spellchecker function for TinyMCE. For the default configuration, it also adds a spellcheck button to the TinyMCE toolbar. Default: <code>False</code>.</p> <p>//// note If you are using a custom TinyMCE configuration, don't forget to add the spellchecker plugin to your configuration, and add the necessary menu item/toolbar button. Also read the Language Configuration subsection about how to configure the spellchecker. ////</p>"},{"location":"configuration/#tinymce_filebrowser","title":"<code>TINYMCE_FILEBROWSER</code>","text":"<p>Enables file browser support in TinyMCE image and link dialogs. <code>tinymce4-plus</code> supports django-filebrowser-no-grappelli file browser. Default: <code>True</code> if <code>'filebrowser'</code> is added to INSTALLED_APPS, else <code>False</code>.</p>"},{"location":"configuration/#tinymce_js_url","title":"<code>TINYMCE_JS_URL</code>","text":"<p>A path to the TinyMCE JavaScript library. Default: <code>{your_static_url}/tinymce/js/tinymce/tinymce.min.js</code>. The following example shows how to load the TinyMCE library from a CDN:</p> <pre><code>TINYMCE_JS_URL = '//cdn.tinymce.com/4/tinymce.min.js'\n</code></pre>"},{"location":"configuration/#tinymce_additional_js_urls","title":"<code>TINYMCE_ADDITIONAL_JS_URLS</code>","text":"<p>A <code>list</code> of URLs for additional JavaScript files to be used with the TinyMCE widget, for example, custom TinyMCE plugins. Default: <code>None</code>.</p>"},{"location":"configuration/#tinymce_css_url","title":"<code>TINYMCE_CSS_URL</code>","text":"<p>A path to a CSS file with additional styles for TinyMCE. Unlike <code>content_style</code> and <code>content_css</code> TinyMCE settings (see Applying custom CSS), this CSS is applied to the TinyMCE widget itself, for example, to correct the widget position on a page. Default: <code>None</code>.</p>"},{"location":"configuration/#tinymce_callbacks","title":"<code>TINYMCE_CALLBACKS</code>","text":"<p>Allows defining custom TinyMCE callbacks, for example, <code>file_browser_callback</code> or <code>spellchecker_callback</code>. This is a Python <code>dict</code> where keys are the names of callbacks and values are JavaScript objects as Python strings. Default: <code>{}</code> (an empty <code>dict</code>). Read TinyMCE documentation to learn about available callbacks.</p> <p>Note: Custom <code>file_browser_callback</code> and <code>spellchecker_callback</code> options defined in <code>TINYMCE_CALLBACKS</code> override <code>tinymce4-plus</code> built-in callbacks.</p>"},{"location":"configuration/#language-configuration","title":"Language Configuration","text":"<p>By default, <code>tinymce4-plus</code> sets TinyMCE interface language and writing directionality depending on the current Django language. However, to correctly select a TinyMCE 4 translation file, the Django language code must match the name of the TinyMCE translation file. Supported combinations:</p> <ul> <li><code>ll</code> (Django) =&gt; <code>ll.js</code> (TinyMCE)</li> <li><code>ll-cc</code> (Django) =&gt; <code>ll_CC.js</code> (TinyMCE)</li> <li><code>ll-cc</code> (Django) =&gt; <code>ll.js</code> (TinyMCE)</li> </ul> <p>The <code>ll</code> (Django) =&gt; <code>ll_CC.js</code> (TinyMCE) is not supported because TinyMCE may have several country-specific variants of translation files. In this case, you can manually rename the necessary TinyMCE translation file to match your Django language code.</p> <p>The <code>LANGUAGES</code> option defines the list of available spellchecker languages. The first language in this list is used as the default one. The list of spellchecker languages also depends on available pyenchant dictionaries. For example, on Windows, the default pyenchant installation includes only English, German, and French spellchecker dictionaries. You can view the list of available spellchecker dictionaries by running the <code>enchant.list_languages()</code> function in a console from your working Python environment. For example:</p> <pre><code>&gt;&gt;&gt; import enchant\n&gt;&gt;&gt; enchant.list_languages()\n['de_DE', 'en_AU', 'en_GB', 'en_US', 'fr_FR']\n</code></pre> <p>On Linux, you can install Hunspell dictionaries for your languages that will be automatically used by pyenchant. E.g. for the Ukrainian spelling dictionary on Ubuntu/Debian:</p> <pre><code>sudo apt install hunspell-uk\n</code></pre> <p>On Windows, you need to add the necessary dictionaries manually to the enchant package in the <code>site-packages</code> directory of your working Python environment. Additional spellchecker dictionaries can be downloaded from this page. Unpack a <code>.sox</code> file using an archive manager, for example, 7zip, and copy <code>.dic</code> and <code>.aff</code> for your language to <code>enchant/share/enchant/myspell/</code> directory inside the enchant package.</p> <p>//// note Django language codes in <code>LANGUAGES</code> must match dictionary filenames. For example, <code>'en-us'</code> in <code>LANGUAGES</code> (with a country code) corresponds to <code>en_US.dic</code>/<code>en_US.aff</code> dictionary files, and <code>'uk'</code> (no country code) corresponds to <code>uk.dic</code>/<code>uk.aff</code> dictionary files. ////</p> <p>Also, you can completely override TinyMCE automatic language configuration by defining the necessary language options in <code>TINYMCE_DEFAULT_CONFIG</code>.</p>"},{"location":"contributing/","title":"Contributing and Development","text":""},{"location":"contributing/#setup-development-environment","title":"Setup development environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/danfimov/django-tinymce4-plus.git\ncd django-tinymce4-plus\n\n# Create a virtual environment (optional but recommended)\nmake venv\n\n# Install dependencies\nmake init\n</code></pre> <p>You can see other useful commands by running <code>make help</code>.</p>"},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Add tests for new functionality</li> <li>Ensure all tests pass</li> <li>Submit a pull request</li> </ol>"},{"location":"example_project/","title":"Example project","text":"<p>The <code>tinymce4-plus</code> sources include test_tinymce project that can be used to run automated tests or to try a live TinyMCE 4 editor widget. The test project can also serve as a basic example of <code>tinymce4-plus</code> usage.</p> <p>To use the test project, first you need to install the necessary dependencies:</p> <pre><code>uv install --all-extras\n</code></pre> <p>Then you need to create the test database:</p> <pre><code>uv run python3 manage.py migrate\n</code></pre> <p>If you want to try TinyMCE in Django Admin, create a superuser to access the Admin interface:</p> <pre><code>uv run python3 manage.py createsuperuser\n</code></pre> <p>To run automated tests, enter in the console:</p> <pre><code>uv run pytest\n</code></pre> <p>Tests require web-browsers: Firefox on Windows and Chrome on other platforms. You also need to download respective Selenium drivers for your platform: Gecko driver or Chrome driver. Set the necessary permissions for a driver executable and add the directory where it resides to your system <code>PATH</code> environment variable.</p> <p>To open TinyMCE 4 editor, run the test server:</p> <pre><code>uv run python3 manage.py runserver\n</code></pre> <p>Then open the project's admin page in your browser: http://127.0.0.1:8000/admin/test_tinymce/testmodel/add/. The browser will open a webpage with a TinyMCE 4 editor.</p> <p>//// note The commands described in this section need to be run from the <code>tinymce4-plus</code> sources root directory. ////</p> <p>The test project is very simple. It allows you to try rich text editing in TinyMCE 4 and then save the text and see how it looks on a web page.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#basic-installation-and-configuration","title":"Basic installation and configuration","text":"<p>Install <code>django-tinymce4-plus</code> from PyPI:</p> pipuvpoetry <pre><code>pip install django-tinymce4-plus\n</code></pre> <pre><code>uv add django-tinymce4-plus\n</code></pre> <pre><code>poetry add django-tinymce4-plus\n</code></pre> <p>Add <code>tinymce</code> to <code>INSTALLED_APPS</code> in <code>settings.py</code> for your Django project:</p> <pre><code>INSTALLED_APPS = (\n    ...\n    'tinymce',\n)\n</code></pre> <p>Add <code>tinymce.urls</code> to <code>urls.py</code> for your project:</p> <pre><code>urlpatterns = [\n    ...\n    path('tinymce/', include('tinymce.urls')),\n    ...\n]\n</code></pre> <p>Or with old-style regex <code>url</code>:</p> <pre><code>urlpatterns = [\n    ...\n    url(r'^tinymce/', include('tinymce.urls')),\n    ...\n]\n</code></pre>"},{"location":"installation/#plugins","title":"Plugins","text":"<p>If you want to use django-filebrowser-no-grappelli file manager, install this package. Refer to django-filebrowser documentation to learn how to install and configure the filebrowser application.</p> <p>For TinyMCE spellchecker plugin, you need to install the pyenchant extra package:</p> pipuvpoetry <pre><code>pip install django-tinymce4-plus[enchant]\n</code></pre> <pre><code>uv add django-tinymce4-plus[enchant]\n</code></pre> <pre><code>poetry add django-tinymce4-plus[enchant]\n</code></pre> <p>or just</p> pipuvpoetry <pre><code>pip install pyenchant\n</code></pre> <pre><code>uv add pyenchant\n</code></pre> <pre><code>poetry add pyenchant\n</code></pre> <p>On some Linux systems, you may also need to install binary <code>enchant</code> libraries prior to installing <code>pyenchant</code>. For example, on Debian/Ubuntu use the following command:</p> <pre><code>sudo apt-get install enchant\n</code></pre> <p>Also, you need to add the necessary spelling dictionaries if they are missing from <code>pyenchant</code> default installation on your system.</p> <p>Read the Language Configuration subsection about configuring the <code>tinymce4-plus</code> spellchecker.</p>"},{"location":"installation/#upgrade","title":"Upgrade","text":"<p>It is strongly recommended to upgrade <code>tinymce4-plus</code> by specifying the exact application version you want to upgrade to:</p> pipuvpoetry <pre><code>pip install django-tinymce4-plus==X.Y.Z\n</code></pre> <pre><code>uv add django-tinymce4-plus==X.Y.Z\n</code></pre> <pre><code>poetry add django-tinymce4-plus==X.Y.Z\n</code></pre> <p>Unless you are loading TinyMCE 4 from a CDN, after upgrading you need to run Django's <code>collectstatic</code> command to update TinyMCE 4 static files in your folder where your project's static files are served from:</p> <pre><code>python3 manage.py collectstatic\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#htmlfield-for-models","title":"HTMLField for Models","text":"<p>For developers who want to implement TinyMCE editor in their Django applications in the simplest possible way, <code>tinymce4-plus</code> provides an <code>HTMLField</code> field for models. This field can be used instead of a <code>TextField</code>. For example:</p> <pre><code>from django.db import models\nfrom tinymce import HTMLField\n\nclass MyModel(models.Model):\n    ...\n    content = HTMLField('Content')\n</code></pre> <p>Don't forget to apply the <code>safe</code> filter to the HTML content in your templates to render it properly. For example:</p> <pre><code>{{ my_model.content|safe }}\n</code></pre> <p>//// warning If you are using TinyMCE editor in publicly facing webpages, it is strongly recommended to define the <code>valid_elements</code> option for TinyMCE to limit the set of allowed HTML elements and/or to filter submitted content for security reasons. ////</p> <p>In the Django Admin interface, the widget is used automatically for all models that have <code>HTMLField</code> fields.</p> <p>If you are using TinyMCE 4 in your website forms, you need to add the <code>form.media</code> template variable to the <code>&lt;head&gt;</code> section of your templates:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  ...\n  {{ form.media }}\n&lt;/head&gt;\n&lt;body&gt;\n  ...\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"usage/#tinymce-widget-for-forms","title":"TinyMCE Widget for Forms","text":"<p>In custom forms, you can use the <code>TinyMCE</code> form widget to render the TinyMCE editor instead of a simple <code>CharField</code>:</p> <pre><code>from django import forms\nfrom tinymce import TinyMCE\n\nclass MyForm(forms.Form):\n    content = forms.CharField(widget=TinyMCE(mce_attrs={'width': 800}))\n</code></pre> <p>The <code>TinyMCE</code> class constructor takes 3 parameters:</p> <ul> <li><code>attrs</code> -- general Django widget attributes.</li> <li><code>mce_attrs</code> -- additional configuration parameters for TinyMCE 4. These parameters amend the existing configuration. For example, in the preceding code sample, the <code>'width'</code> parameter sets the TinyMCE widget width to 800 pixels without changing other configuration options.</li> <li><code>profile</code> -- TinyMCE 4 configuration parameters. They replace the existing configuration. That is, you need to provide a fully defined TinyMCE configuration for the <code>profile</code> parameter.</li> </ul> <p>Also see the information about the <code>form.media</code> template variable in the preceding subsection.</p>"}]}